name: Vote

on:
  push:
    branches: [master]

jobs:
  check-quality:
    runs-on: ubuntu-latest
    name: Checking code check quality
    steps:
      - name: Check code meets quality standars
        id: code-inspector
        uses: codeinspectorio/github-action@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          code_inspector_api_token: ${{ secrets.CODE_INSPECTOR_API_TOKEN_VOTE }}
          force_ref: 'none'
          min_quality_grade: 'WARNING'
          min_quality_score: '50'
          max_defects_rate: '0.01'
          max_complex_functions_rate: '0.01'
          max_long_functions_rate: '0.01'
          project_name: ''
          max_timeout_sec: '600'

  test:
    name: Unit test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Test
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          cd ./vote
          pip install -r requirements.txt
      
      - name: PyTest
        run: python -m pytest ./vote/test/app/test.py --doctest-modules --junitxml=vote/test/junit/test-results.xml --cov-report=xml --cov-report=html

      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results (Python ${{ matrix.python-version }})
          path: junit/test-results.xml
        if: ${{ always() }}

        
  build:
    name: Pushing dockerhub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

      - name: Build Docker Image
        run: docker build -t ${{secrets.DOCKER_USER}}/vote vote/

      - name: Docker Push
        run: docker push ${{secrets.DOCKER_USER}}/vote

  deploy:
    name: Upload to Heroku
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure Heroku credentials from Production account
      env:
        HEROKU_API_KEY: ${{secrets.HEROKU_API_KEY}}
      run: heroku container:login

    - name: Envrioment variables
      env:
        HEROKU_API_KEY: ${{secrets.HEROKU_API_KEY}}
      run: |
            heroku config:set REDIS_PORT=${{ secrets.REDIS_PORT }} -a proyecto-ing-soft-3-vote
            heroku config:set REDIS_HOST=${{ secrets.REDIS_HOST }} -a proyecto-ing-soft-3-vote
            heroku config:set REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} -a proyecto-ing-soft-3-vote

    - name: Push
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        cd ./vote
        heroku container:push -a proyecto-ing-soft-3-vote web

    - name: Release
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        heroku container:release -a proyecto-ing-soft-3-vote web
        heroku logs --app=proyecto-ing-soft-3-vote
      
        